#ifndef FUNCTIONS_H
#define FUNCTIONS_H

#include <inttypes.h>

typedef enum {
  OPCODE_1BYTE,
  OPCODE_2BYTE
} OpcodeType;

typedef enum {
  TOKEN_OPERATOR,
  TOKEN_FUNCTION,
  TOKEN_VAR,
  TOKEN_OTHER, // ?
  TOKEN_NONE
} TokenType;

typedef struct {
  uint16_t opcode;
  OpcodeType opcodeType;
  TokenType  tokenType;
  char *name;
} TIFunction;

TIFunction functionTable[] = {
  {0xc0, OPCODE_1BYTE, TOKEN_FUNCTION, "log("},
  {0x12, OPCODE_1BYTE, TOKEN_FUNCTION, "round("},
  {0x19, OPCODE_1BYTE, TOKEN_FUNCTION, "max("},
  {0x1a, OPCODE_1BYTE, TOKEN_FUNCTION, "min("},
  {0x20, OPCODE_1BYTE, TOKEN_FUNCTION, "randM("},
  {0x21, OPCODE_1BYTE, TOKEN_FUNCTION, "mean("},
  {0x22, OPCODE_1BYTE, TOKEN_FUNCTION, "solve("},
  {0x23, OPCODE_1BYTE, TOKEN_FUNCTION, "seq("},
  {0x24, OPCODE_1BYTE, TOKEN_FUNCTION, "fnInt("},
  {0x25, OPCODE_1BYTE, TOKEN_FUNCTION, "nDeriv("},
  {0x27, OPCODE_1BYTE, TOKEN_FUNCTION, "fMin("},
  {0x28, OPCODE_1BYTE, TOKEN_FUNCTION, "fMax("},
  {0x3c, OPCODE_1BYTE, TOKEN_OPERATOR, " or "},
  {0x3d, OPCODE_1BYTE, TOKEN_OPERATOR, " xor "},
  {0x40, OPCODE_1BYTE, TOKEN_OPERATOR, " and "},
  {0x13, OPCODE_1BYTE, TOKEN_FUNCTION, "pxlTest("},
  {0x14, OPCODE_1BYTE, TOKEN_FUNCTION, "augment("},
  {0x15, OPCODE_1BYTE, TOKEN_FUNCTION, "rowSwap("},
  {0x16, OPCODE_1BYTE, TOKEN_FUNCTION, "row+("},
  {0x5f, OPCODE_1BYTE, TOKEN_FUNCTION, "prgm"},
  {0x64, OPCODE_1BYTE, TOKEN_VAR, "Radian"},
  {0x65, OPCODE_1BYTE, TOKEN_VAR, "Degree"},
  {0x66, OPCODE_1BYTE, TOKEN_VAR, "Normal"},
  {0x67, OPCODE_1BYTE, TOKEN_VAR, "Sci"},
  {0x68, OPCODE_1BYTE, TOKEN_VAR, "Eng"},
  {0x69, OPCODE_1BYTE, TOKEN_VAR, "Float"},
  {0x17, OPCODE_1BYTE, TOKEN_FUNCTION, "*row("},
  {0x18, OPCODE_1BYTE, TOKEN_FUNCTION, "*row+("},
  {0x2e, OPCODE_1BYTE, TOKEN_VAR, "CubicReg"},
  {0x2f, OPCODE_1BYTE, TOKEN_VAR, "QuartReg"},
  {0x72, OPCODE_1BYTE, TOKEN_VAR, "Ans"},
  {0x73, OPCODE_1BYTE, TOKEN_VAR, "Fix"},
  {0x74, OPCODE_1BYTE, TOKEN_VAR, "Horiz"},
  {0x75, OPCODE_1BYTE, TOKEN_VAR, "Full"},
  {0x76, OPCODE_1BYTE, TOKEN_VAR, "Func"},
  {0x77, OPCODE_1BYTE, TOKEN_VAR, "Param"},
  {0x78, OPCODE_1BYTE, TOKEN_VAR, "Polar"},
  {0x79, OPCODE_1BYTE, TOKEN_VAR, "Seq"},
  {0x7a, OPCODE_1BYTE, TOKEN_FUNCTION, "IndpntAuto"},
  {0x7b, OPCODE_1BYTE, TOKEN_FUNCTION, "IndpntAsk"},
  {0x7c, OPCODE_1BYTE, TOKEN_FUNCTION, "DependAuto"},
  {0x7d, OPCODE_1BYTE, TOKEN_FUNCTION, "DependAsk"},
  {0x04, OPCODE_1BYTE, TOKEN_OPERATOR, "->"},
  {0x29, OPCODE_1BYTE, TOKEN_OTHER, " "},
  {0x84, OPCODE_1BYTE, TOKEN_VAR, "Trace"},
  {0x85, OPCODE_1BYTE, TOKEN_FUNCTION, "ClrDraw"},
  {0x86, OPCODE_1BYTE, TOKEN_FUNCTION, "ZStandard"},
  {0x87, OPCODE_1BYTE, TOKEN_FUNCTION, "Ztrig"},
  {0x88, OPCODE_1BYTE, TOKEN_FUNCTION, "ZBox"},
  {0x89, OPCODE_1BYTE, TOKEN_FUNCTION, "Zoom In"},
  {0x8a, OPCODE_1BYTE, TOKEN_FUNCTION, "Zoom Out"},
  {0x8b, OPCODE_1BYTE, TOKEN_FUNCTION, "ZSquare"},
  {0x8c, OPCODE_1BYTE, TOKEN_FUNCTION, "ZInteger"},
  {0x8d, OPCODE_1BYTE, TOKEN_FUNCTION, "ZPrevious"},
  {0x8e, OPCODE_1BYTE, TOKEN_FUNCTION, "ZDecimal"},
  {0x8f, OPCODE_1BYTE, TOKEN_FUNCTION, "ZoomStat"},
  {0x90, OPCODE_1BYTE, TOKEN_FUNCTION, "ZoomRcl"},
  {0x91, OPCODE_1BYTE, TOKEN_FUNCTION, "PrintScreen"},
  {0x92, OPCODE_1BYTE, TOKEN_FUNCTION, "ZoomSto"},
  {0x93, OPCODE_1BYTE, TOKEN_FUNCTION, "Text("},
  {0x94, OPCODE_1BYTE, TOKEN_FUNCTION, "nPr"},
  {0x95, OPCODE_1BYTE, TOKEN_FUNCTION, "nCr"},
  {0x96, OPCODE_1BYTE, TOKEN_FUNCTION, "FnOn"},
  {0x97, OPCODE_1BYTE, TOKEN_FUNCTION, "FnOff"},
  {0x98, OPCODE_1BYTE, TOKEN_FUNCTION, "StorePic"},
  {0x99, OPCODE_1BYTE, TOKEN_FUNCTION, "RecallPic"},
  {0x9a, OPCODE_1BYTE, TOKEN_FUNCTION, "StoreGDB"},
  {0x9b, OPCODE_1BYTE, TOKEN_FUNCTION, "RecallGDB"},
  {0x9c, OPCODE_1BYTE, TOKEN_FUNCTION, "Line("},
  {0x9d, OPCODE_1BYTE, TOKEN_FUNCTION, "Vertical"},
  {0x9e, OPCODE_1BYTE, TOKEN_FUNCTION, "Pt-On("},
  {0x9f, OPCODE_1BYTE, TOKEN_FUNCTION, "Pt-Off("},
  {0xa0, OPCODE_1BYTE, TOKEN_FUNCTION, "Pt-Change("},
  {0xa1, OPCODE_1BYTE, TOKEN_FUNCTION, "Pxl-On("},
  {0xa2, OPCODE_1BYTE, TOKEN_FUNCTION, "Pxl-Off("},
  {0xa3, OPCODE_1BYTE, TOKEN_FUNCTION, "Pxl-Change("},
  {0xa4, OPCODE_1BYTE, TOKEN_FUNCTION, "Shade("},
  {0xa5, OPCODE_1BYTE, TOKEN_FUNCTION, "Circle("},
  {0xa6, OPCODE_1BYTE, TOKEN_FUNCTION, "Horizontal"},
  {0xa7, OPCODE_1BYTE, TOKEN_FUNCTION, "Tangent("},
  {0xa8, OPCODE_1BYTE, TOKEN_FUNCTION, "DrawInv"},
  {0xa9, OPCODE_1BYTE, TOKEN_FUNCTION, "DrawF"},
  {0xab, OPCODE_1BYTE, TOKEN_FUNCTION, "rand"},
  {0xac, OPCODE_1BYTE, TOKEN_VAR, "pi"},
  {0xad, OPCODE_1BYTE, TOKEN_VAR, "getKey"},
  {0xb1, OPCODE_1BYTE, TOKEN_FUNCTION, "int("},
  {0xb2, OPCODE_1BYTE, TOKEN_FUNCTION, "abs("},
  {0xb3, OPCODE_1BYTE, TOKEN_FUNCTION, "det("},
  {0xb4, OPCODE_1BYTE, TOKEN_FUNCTION, "identity("},
  {0xb5, OPCODE_1BYTE, TOKEN_FUNCTION, "dim("},
  {0xb6, OPCODE_1BYTE, TOKEN_FUNCTION, "sum("},
  {0xb7, OPCODE_1BYTE, TOKEN_FUNCTION, "prod("},
  {0xb8, OPCODE_1BYTE, TOKEN_FUNCTION, "not("},
  {0xb9, OPCODE_1BYTE, TOKEN_FUNCTION, "iPart("},
  {0xba, OPCODE_1BYTE, TOKEN_FUNCTION, "fPart("},
  {0xbc, OPCODE_1BYTE, TOKEN_FUNCTION, "sqrt("},
  {0xbd, OPCODE_1BYTE, TOKEN_FUNCTION, "cbrt("},
  {0xbe, OPCODE_1BYTE, TOKEN_FUNCTION, "ln("},
  {0xbf, OPCODE_1BYTE, TOKEN_FUNCTION, "e^("},
  {0xc0, OPCODE_1BYTE, TOKEN_FUNCTION, "log("},
  {0xc1, OPCODE_1BYTE, TOKEN_FUNCTION, "10^("},
  {0xc2, OPCODE_1BYTE, TOKEN_FUNCTION, "sin("},
  {0xc3, OPCODE_1BYTE, TOKEN_FUNCTION, "sin-1("},
  {0xc4, OPCODE_1BYTE, TOKEN_FUNCTION, "cos("},
  {0xc5, OPCODE_1BYTE, TOKEN_FUNCTION, "cos-1("},
  {0xc6, OPCODE_1BYTE, TOKEN_FUNCTION, "tan("},
  {0xc7, OPCODE_1BYTE, TOKEN_FUNCTION, "tan-1("},
  {0xc8, OPCODE_1BYTE, TOKEN_FUNCTION, "sinh("},
  {0xc9, OPCODE_1BYTE, TOKEN_FUNCTION, "sinh-1("},
  {0xca, OPCODE_1BYTE, TOKEN_FUNCTION, "cosh("},
  {0xcb, OPCODE_1BYTE, TOKEN_FUNCTION, "cosh-1("},
  {0xcc, OPCODE_1BYTE, TOKEN_FUNCTION, "tanh("},
  {0xcd, OPCODE_1BYTE, TOKEN_FUNCTION, "tanh-1("},
  {0xce, OPCODE_1BYTE, TOKEN_FUNCTION, "If "},
  {0xcf, OPCODE_1BYTE, TOKEN_FUNCTION, "Then"},
  {0xd0, OPCODE_1BYTE, TOKEN_FUNCTION, "Else"},
  {0xd1, OPCODE_1BYTE, TOKEN_FUNCTION, "While "},
  {0xd2, OPCODE_1BYTE, TOKEN_FUNCTION, "Repeat "},
  {0xd3, OPCODE_1BYTE, TOKEN_FUNCTION, "For("},
  {0xd4, OPCODE_1BYTE, TOKEN_FUNCTION, "End"},
  {0xd5, OPCODE_1BYTE, TOKEN_FUNCTION, "Return"},
  {0xd6, OPCODE_1BYTE, TOKEN_FUNCTION, "Lbl "},
  {0xd7, OPCODE_1BYTE, TOKEN_FUNCTION, "Goto "},
  {0xd8, OPCODE_1BYTE, TOKEN_FUNCTION, "Pause "},
  {0xd9, OPCODE_1BYTE, TOKEN_FUNCTION, "Stop"},
  {0xda, OPCODE_1BYTE, TOKEN_FUNCTION, "IS>("},
  {0xdb, OPCODE_1BYTE, TOKEN_FUNCTION, "DS<("},
  {0xdc, OPCODE_1BYTE, TOKEN_FUNCTION, "Input "},
  {0xdd, OPCODE_1BYTE, TOKEN_FUNCTION, "Prompt "},
  {0xde, OPCODE_1BYTE, TOKEN_FUNCTION, "Disp "},
  {0xdf, OPCODE_1BYTE, TOKEN_FUNCTION, "DispGraph"},
  {0xe0, OPCODE_1BYTE, TOKEN_FUNCTION, "Output("},
  {0xe1, OPCODE_1BYTE, TOKEN_FUNCTION, "ClrHome"},
  {0xe2, OPCODE_1BYTE, TOKEN_FUNCTION, "Fill("},
  {0xe3, OPCODE_1BYTE, TOKEN_FUNCTION, "SortA("},
  {0xe4, OPCODE_1BYTE, TOKEN_FUNCTION, "SortD("},
  {0xe5, OPCODE_1BYTE, TOKEN_FUNCTION, "DispTable"},
  {0xe6, OPCODE_1BYTE, TOKEN_FUNCTION, "Menu("},
  {0xe7, OPCODE_1BYTE, TOKEN_FUNCTION, "Send("},
  {0xe8, OPCODE_1BYTE, TOKEN_FUNCTION, "Get("},
  {0xe9, OPCODE_1BYTE, TOKEN_FUNCTION, "PlotsOn"},
  {0xea, OPCODE_1BYTE, TOKEN_FUNCTION, "PlotsOff"},
  {0xec, OPCODE_1BYTE, TOKEN_FUNCTION, "Plot1("},
  {0xed, OPCODE_1BYTE, TOKEN_FUNCTION, "Plot2("},
  {0xee, OPCODE_1BYTE, TOKEN_FUNCTION, "Plot3("},
  {0xf1, OPCODE_1BYTE, TOKEN_FUNCTION, "xrt("},
  {0xf2, OPCODE_1BYTE, TOKEN_VAR, "1-Var Stats"},
  {0xf3, OPCODE_1BYTE, TOKEN_VAR, "2-Var Stats"},
  {0xf4, OPCODE_1BYTE, TOKEN_VAR, "LinReg(a+bx)"},
  {0xf5, OPCODE_1BYTE, TOKEN_VAR, "ExpReg"},
  {0xf6, OPCODE_1BYTE, TOKEN_VAR, "LnReg"},
  {0xf7, OPCODE_1BYTE, TOKEN_VAR, "PwrReg"},
  {0xf8, OPCODE_1BYTE, TOKEN_VAR, "Med-Med"},
  {0xf9, OPCODE_1BYTE, TOKEN_VAR, "QuadReg"},
  {0xfa, OPCODE_1BYTE, TOKEN_VAR, "ClrList"},
  {0xfb, OPCODE_1BYTE, TOKEN_VAR, "ClrTable"},
  {0xfc, OPCODE_1BYTE, TOKEN_VAR, "Histogram"},
  {0xfd, OPCODE_1BYTE, TOKEN_VAR, "xyLine"},
  {0xfe, OPCODE_1BYTE, TOKEN_VAR, "Scatter"},
  {0xff, OPCODE_1BYTE, TOKEN_VAR, "LinReg(ax+b)"},
  {0x2c, OPCODE_1BYTE, TOKEN_VAR, "i"},

  {0x5c00, OPCODE_2BYTE, TOKEN_VAR, "[A]"},
  {0x5c01, OPCODE_2BYTE, TOKEN_VAR, "[B]"},
  {0x5c02, OPCODE_2BYTE, TOKEN_VAR, "[C]"},
  {0x5c03, OPCODE_2BYTE, TOKEN_VAR, "[D]"},
  {0x5c04, OPCODE_2BYTE, TOKEN_VAR, "[E]"},
  {0x5c05, OPCODE_2BYTE, TOKEN_VAR, "[F]"},
  {0x5c06, OPCODE_2BYTE, TOKEN_VAR, "[G]"},
  {0x5c07, OPCODE_2BYTE, TOKEN_VAR, "[H]"},
  {0x5c08, OPCODE_2BYTE, TOKEN_VAR, "[I]"},
  {0x5c09, OPCODE_2BYTE, TOKEN_VAR, "[J]"},
  {0x5d00, OPCODE_2BYTE, TOKEN_VAR, "l1"},
  {0x5d01, OPCODE_2BYTE, TOKEN_VAR, "l2"},
  {0x5d02, OPCODE_2BYTE, TOKEN_VAR, "l3"},
  {0x5d03, OPCODE_2BYTE, TOKEN_VAR, "l4"},
  {0x5d04, OPCODE_2BYTE, TOKEN_VAR, "l5"},
  {0x5d05, OPCODE_2BYTE, TOKEN_VAR, "l6"},

  {0x5e10, OPCODE_2BYTE, TOKEN_VAR, "Y1"},
  {0x5e11, OPCODE_2BYTE, TOKEN_VAR, "Y2"},
  {0x5e12, OPCODE_2BYTE, TOKEN_VAR, "Y3"},
  {0x5e13, OPCODE_2BYTE, TOKEN_VAR, "Y4"},
  {0x5e14, OPCODE_2BYTE, TOKEN_VAR, "Y5"},
  {0x5e15, OPCODE_2BYTE, TOKEN_VAR, "Y6"},
  {0x5e16, OPCODE_2BYTE, TOKEN_VAR, "Y7"},
  {0x5e17, OPCODE_2BYTE, TOKEN_VAR, "Y8"},
  {0x5e18, OPCODE_2BYTE, TOKEN_VAR, "Y9"},
  {0x5e19, OPCODE_2BYTE, TOKEN_VAR, "Y0"},
  {0x5e20, OPCODE_2BYTE, TOKEN_VAR, "X1T"},
  {0x5e21, OPCODE_2BYTE, TOKEN_VAR, "Y1T"},
  {0x5e22, OPCODE_2BYTE, TOKEN_VAR, "X2T"},
  {0x5e23, OPCODE_2BYTE, TOKEN_VAR, "Y2T"},
  {0x5e24, OPCODE_2BYTE, TOKEN_VAR, "X3T"},
  {0x5e25, OPCODE_2BYTE, TOKEN_VAR, "Y3T"},
  {0x5e26, OPCODE_2BYTE, TOKEN_VAR, "X4T"},
  {0x5e27, OPCODE_2BYTE, TOKEN_VAR, "Y4T"},
  {0x5e28, OPCODE_2BYTE, TOKEN_VAR, "X5T"},
  {0x5e29, OPCODE_2BYTE, TOKEN_VAR, "Y5T"},
  {0x5e2a, OPCODE_2BYTE, TOKEN_VAR, "X6T"},
  {0x5e2b, OPCODE_2BYTE, TOKEN_VAR, "Y6T"},
  {0x5e40, OPCODE_2BYTE, TOKEN_VAR, "r1"},
  {0x5e41, OPCODE_2BYTE, TOKEN_VAR, "r2"},
  {0x5e42, OPCODE_2BYTE, TOKEN_VAR, "r3"},
  {0x5e43, OPCODE_2BYTE, TOKEN_VAR, "r4"},
  {0x5e44, OPCODE_2BYTE, TOKEN_VAR, "r5"},
  {0x5e45, OPCODE_2BYTE, TOKEN_VAR, "r6"},
  {0x5e80, OPCODE_2BYTE, TOKEN_VAR, "u"},
  {0x5e81, OPCODE_2BYTE, TOKEN_VAR, "v"},
  {0x5e82, OPCODE_2BYTE, TOKEN_VAR, "w"},
  {0xeb, OPCODE_1BYTE, TOKEN_VAR, "l"},

  {0x6000, OPCODE_2BYTE, TOKEN_VAR, "Pic1"},
  {0x6001, OPCODE_2BYTE, TOKEN_VAR, "Pic2"},
  {0x6002, OPCODE_2BYTE, TOKEN_VAR, "Pic3"},
  {0x6003, OPCODE_2BYTE, TOKEN_VAR, "Pic4"},
  {0x6004, OPCODE_2BYTE, TOKEN_VAR, "Pic5"},
  {0x6005, OPCODE_2BYTE, TOKEN_VAR, "Pic6"},
  {0x6006, OPCODE_2BYTE, TOKEN_VAR, "Pic7"},
  {0x6007, OPCODE_2BYTE, TOKEN_VAR, "Pic8"},
  {0x6008, OPCODE_2BYTE, TOKEN_VAR, "Pic9"},
  {0x6009, OPCODE_2BYTE, TOKEN_VAR, "Pic0"},
  {0x6100, OPCODE_2BYTE, TOKEN_VAR, "GDB1"},
  {0x6101, OPCODE_2BYTE, TOKEN_VAR, "GDB2"},
  {0x6102, OPCODE_2BYTE, TOKEN_VAR, "GDB3"},
  {0x6103, OPCODE_2BYTE, TOKEN_VAR, "GDB4"},
  {0x6104, OPCODE_2BYTE, TOKEN_VAR, "GDB5"},
  {0x6105, OPCODE_2BYTE, TOKEN_VAR, "GDB6"},
  {0x6106, OPCODE_2BYTE, TOKEN_VAR, "GDB7"},
  {0x6107, OPCODE_2BYTE, TOKEN_VAR, "GDB8"},
  {0x6108, OPCODE_2BYTE, TOKEN_VAR, "GDB9"},
  {0x6109, OPCODE_2BYTE, TOKEN_VAR, "GDB0"},
  {0xAA00, OPCODE_2BYTE, TOKEN_VAR, "Str1"},
  {0xAA01, OPCODE_2BYTE, TOKEN_VAR, "Str2"},
  {0xAA02, OPCODE_2BYTE, TOKEN_VAR, "Str3"},
  {0xAA03, OPCODE_2BYTE, TOKEN_VAR, "Str4"},
  {0xAA04, OPCODE_2BYTE, TOKEN_VAR, "Str5"},
  {0xAA05, OPCODE_2BYTE, TOKEN_VAR, "Str6"},
  {0xAA06, OPCODE_2BYTE, TOKEN_VAR, "Str7"},
  {0xAA07, OPCODE_2BYTE, TOKEN_VAR, "Str8"},
  {0xAA08, OPCODE_2BYTE, TOKEN_VAR, "Str9"},
  {0xAA09, OPCODE_2BYTE, TOKEN_VAR, "Str0"},

  {0xef00, OPCODE_2BYTE, TOKEN_FUNCTION, "setDate("},
  {0xef01, OPCODE_2BYTE, TOKEN_FUNCTION, "setTime("},
  {0xef02, OPCODE_2BYTE, TOKEN_FUNCTION, "checkTmr("},
  {0xef03, OPCODE_2BYTE, TOKEN_FUNCTION, "setDtFmt("},
  {0xef04, OPCODE_2BYTE, TOKEN_FUNCTION, "setTmFmt("},
  {0xef05, OPCODE_2BYTE, TOKEN_FUNCTION, "timeCnv("},
  {0xef06, OPCODE_2BYTE, TOKEN_FUNCTION, "dayOfWk("},
  {0xef07, OPCODE_2BYTE, TOKEN_FUNCTION, "getDtStr"},
  {0xef08, OPCODE_2BYTE, TOKEN_FUNCTION, "getTmStr("},
  {0xef09, OPCODE_2BYTE, TOKEN_FUNCTION, "getDate"},
  {0xef0a, OPCODE_2BYTE, TOKEN_FUNCTION, "getTime"},
  {0xef0b, OPCODE_2BYTE, TOKEN_FUNCTION, "startTmr"},
  {0xef0c, OPCODE_2BYTE, TOKEN_FUNCTION, "getDtFmt"},
  {0xef0d, OPCODE_2BYTE, TOKEN_FUNCTION, "getTmFmt"},
  {0xef0e, OPCODE_2BYTE, TOKEN_FUNCTION, "isClockOn"},
  {0xef0f, OPCODE_2BYTE, TOKEN_FUNCTION, "ClockOff"},
  {0xef10, OPCODE_2BYTE, TOKEN_FUNCTION, "ClockOn"},
  {0xef11, OPCODE_2BYTE, TOKEN_FUNCTION, "OpenLib("},
  {0xef12, OPCODE_2BYTE, TOKEN_FUNCTION, "ExecLib"},
  {0xef13, OPCODE_2BYTE, TOKEN_FUNCTION, "invT("},
  {0xef14, OPCODE_2BYTE, TOKEN_FUNCTION, "X2GOF-Test("},
  {0xef15, OPCODE_2BYTE, TOKEN_VAR, "LinRegTInt"},
  {0xef16, OPCODE_2BYTE, TOKEN_VAR, "Manual-Fit"},
  {0xef17, OPCODE_2BYTE, TOKEN_VAR, "ZQuadrant1"},
  {0xef18, OPCODE_2BYTE, TOKEN_VAR, "ZFrac1/2"},
  {0xef19, OPCODE_2BYTE, TOKEN_VAR, "ZFrac1/3"},
  {0xef1a, OPCODE_2BYTE, TOKEN_VAR, "ZFrac1/4"},
  {0xef1b, OPCODE_2BYTE, TOKEN_VAR, "ZFrac1/5"},
  {0xef1c, OPCODE_2BYTE, TOKEN_VAR, "ZFrac1/8"},
  {0xef1d, OPCODE_2BYTE, TOKEN_VAR, "ZFrac1/10"},
  {0xef1e, OPCODE_2BYTE, TOKEN_VAR, "mathprintbox"},
  {0xef30, OPCODE_2BYTE, TOKEN_FUNCTION, ">n/d<>Un/d"},
  {0xef31, OPCODE_2BYTE, TOKEN_FUNCTION, ">F<>D"},
  {0xef32, OPCODE_2BYTE, TOKEN_FUNCTION, "remainder("},
  {0xef33, OPCODE_2BYTE, TOKEN_FUNCTION, "sigm("},
  {0xef34, OPCODE_2BYTE, TOKEN_FUNCTION, "logBASE("},
  {0xef35, OPCODE_2BYTE, TOKEN_FUNCTION, "randIntNoRep("},
  {0xef36, OPCODE_2BYTE, TOKEN_VAR, "MATHPRINT"},
  {0xef37, OPCODE_2BYTE, TOKEN_VAR, "CLASSIC"},
  {0xef38, OPCODE_2BYTE, TOKEN_VAR, "n/d"},
  {0xef39, OPCODE_2BYTE, TOKEN_VAR, "Un/d"},
  {0xef3a, OPCODE_2BYTE, TOKEN_VAR, "AUTO"},
  {0xef3b, OPCODE_2BYTE, TOKEN_VAR, "DEC"},
  {0xef3c, OPCODE_2BYTE, TOKEN_VAR, "FRAC"},
  {0xef3d, OPCODE_2BYTE, TOKEN_VAR, "FRAC-APPROX"},
  {0xef41, OPCODE_2BYTE, TOKEN_VAR, "BLUE"},
  {0xef42, OPCODE_2BYTE, TOKEN_VAR, "RED"},
  {0xef43, OPCODE_2BYTE, TOKEN_VAR, "BLACK"},
  {0xef44, OPCODE_2BYTE, TOKEN_VAR, "MAGENTA"},
  {0xef45, OPCODE_2BYTE, TOKEN_VAR, "GREEN"},
  {0xef46, OPCODE_2BYTE, TOKEN_VAR, "ORANGE"},
  {0xef47, OPCODE_2BYTE, TOKEN_VAR, "BROWN"},
  {0xef48, OPCODE_2BYTE, TOKEN_VAR, "NAVY"},
  {0xef49, OPCODE_2BYTE, TOKEN_VAR, "LTBLUE"},
  {0xef4a, OPCODE_2BYTE, TOKEN_VAR, "YELLOW"},
  {0xef4b, OPCODE_2BYTE, TOKEN_VAR, "WHITE"},
  {0xef4c, OPCODE_2BYTE, TOKEN_VAR, "LTGREY"},
  {0xef4d, OPCODE_2BYTE, TOKEN_VAR, "MEDGREY"},
  {0xef4e, OPCODE_2BYTE, TOKEN_VAR, "GREY"},
  {0xef4f, OPCODE_2BYTE, TOKEN_VAR, "DARKGREY"},
  {0xef50, OPCODE_2BYTE, TOKEN_VAR, "Image1"},
  {0xef51, OPCODE_2BYTE, TOKEN_VAR, "Image2"},
  {0xef52, OPCODE_2BYTE, TOKEN_VAR, "Image3"},
  {0xef53, OPCODE_2BYTE, TOKEN_VAR, "Image4"},
  {0xef54, OPCODE_2BYTE, TOKEN_VAR, "Image5"},
  {0xef55, OPCODE_2BYTE, TOKEN_VAR, "Image6"},
  {0xef56, OPCODE_2BYTE, TOKEN_VAR, "Image7"},
  {0xef57, OPCODE_2BYTE, TOKEN_VAR, "Image8"},
  {0xef58, OPCODE_2BYTE, TOKEN_VAR, "Image9"},
  {0xef59, OPCODE_2BYTE, TOKEN_VAR, "Image0"},
  {0xef5a, OPCODE_2BYTE, TOKEN_VAR, "Gridline"},
  {0xef5b, OPCODE_2BYTE, TOKEN_FUNCTION, "BackgroundOn"},
  {0xef64, OPCODE_2BYTE, TOKEN_FUNCTION, "BackgroundOff"},
  {0xef65, OPCODE_2BYTE, TOKEN_FUNCTION, "GraphColor("},
  {0xef67, OPCODE_2BYTE, TOKEN_FUNCTION, "TextColor("},
  {0xef68, OPCODE_2BYTE, TOKEN_FUNCTION, "Asm84CPrgm"},
  {0xef6a, OPCODE_2BYTE, TOKEN_FUNCTION, "DetectAsymOn"},
  {0xef6b, OPCODE_2BYTE, TOKEN_FUNCTION, "DetectAsymOff"},
  {0xef6c, OPCODE_2BYTE, TOKEN_FUNCTION, "BorderColor"},
  {0xef73, OPCODE_2BYTE, TOKEN_VAR, "tinydotplot"},
  {0xef74, OPCODE_2BYTE, TOKEN_VAR, "Thin"},
  {0xef75, OPCODE_2BYTE, TOKEN_VAR, "Dot-Thin"},
  {0xef7a, OPCODE_2BYTE, TOKEN_FUNCTION, "Asm84CEPrgm"},
  {0xef92, OPCODE_2BYTE, TOKEN_VAR, "LEFT"},
  {0xef93, OPCODE_2BYTE, TOKEN_VAR, "CENTER"},
  {0xef94, OPCODE_2BYTE, TOKEN_VAR, "RIGHT"},
  {0xef95, OPCODE_2BYTE, TOKEN_FUNCTION, "invBinom("},
  {0xef96, OPCODE_2BYTE, TOKEN_FUNCTION, "Wait"},
  {0xef97, OPCODE_2BYTE, TOKEN_FUNCTION, "toString("},
  {0xef98, OPCODE_2BYTE, TOKEN_FUNCTION, "eval("},
  {0xefa6, OPCODE_2BYTE, TOKEN_FUNCTION, "piecewise("},
  {0xef82, OPCODE_2BYTE, TOKEN_VAR, "u(n-2)"},
  {0xef83, OPCODE_2BYTE, TOKEN_VAR, "v(n-2)"},
  {0xef84, OPCODE_2BYTE, TOKEN_VAR, "w(n-2)"},
  {0xef85, OPCODE_2BYTE, TOKEN_VAR, "u(n-1)"},
  {0xef86, OPCODE_2BYTE, TOKEN_VAR, "v(n-1)"},
  {0xef87, OPCODE_2BYTE, TOKEN_VAR, "w(n-1)"},
  {0xef88, OPCODE_2BYTE, TOKEN_VAR, "u(n)"},
  {0xef89, OPCODE_2BYTE, TOKEN_VAR, "v(n)"},
  {0xef8a, OPCODE_2BYTE, TOKEN_VAR, "w(n)"},
  {0xef8b, OPCODE_2BYTE, TOKEN_VAR, "u(n+1)"},
  {0xef8c, OPCODE_2BYTE, TOKEN_VAR, "v(n+1)"},
  {0xef8d, OPCODE_2BYTE, TOKEN_VAR, "w(n+1)"},
  {0xef8f, OPCODE_2BYTE, TOKEN_VAR, "SEQ(n)"},
  {0xef90, OPCODE_2BYTE, TOKEN_VAR, "SEQ(n+1)"},
  {0xef91, OPCODE_2BYTE, TOKEN_VAR, "SEQ(n+2)"},

  {0x6201, OPCODE_2BYTE, TOKEN_VAR, "RegEq"},
  {0x6202, OPCODE_2BYTE, TOKEN_VAR, "n"},
  {0x6203, OPCODE_2BYTE, TOKEN_VAR, "xbar"},
  {0x6204, OPCODE_2BYTE, TOKEN_VAR, "sumx"},
  {0x6205, OPCODE_2BYTE, TOKEN_VAR, "sumx2"},
  {0x6206, OPCODE_2BYTE, TOKEN_VAR, "Sx"},
  {0x6207, OPCODE_2BYTE, TOKEN_VAR, "sigmax"},
  {0x6208, OPCODE_2BYTE, TOKEN_VAR, "minX"},
  {0x6209, OPCODE_2BYTE, TOKEN_VAR, "maxX"},
  {0x620a, OPCODE_2BYTE, TOKEN_VAR, "minY"},
  {0x620b, OPCODE_2BYTE, TOKEN_VAR, "maxY"},
  {0x620c, OPCODE_2BYTE, TOKEN_VAR, "ybar"},
  {0x620d, OPCODE_2BYTE, TOKEN_VAR, "sumy"},
  {0x620e, OPCODE_2BYTE, TOKEN_VAR, "sumy2"},
  {0x620f, OPCODE_2BYTE, TOKEN_VAR, "Sy"},
  {0x6210, OPCODE_2BYTE, TOKEN_VAR, "sigmay"},
  {0x6211, OPCODE_2BYTE, TOKEN_VAR, "sumxy"},
  {0x6212, OPCODE_2BYTE, TOKEN_VAR, "r"},
  {0x6213, OPCODE_2BYTE, TOKEN_VAR, "Med"},
  {0x6214, OPCODE_2BYTE, TOKEN_VAR, "Q1"},
  {0x6215, OPCODE_2BYTE, TOKEN_VAR, "Q3"},
  {0x6216, OPCODE_2BYTE, TOKEN_VAR, "a"},
  {0x6217, OPCODE_2BYTE, TOKEN_VAR, "b"},
  {0x6218, OPCODE_2BYTE, TOKEN_VAR, "c"},
  {0x6219, OPCODE_2BYTE, TOKEN_VAR, "d"},
  {0x621a, OPCODE_2BYTE, TOKEN_VAR, "e"},
  {0x621b, OPCODE_2BYTE, TOKEN_VAR, "x1"},
  {0x621c, OPCODE_2BYTE, TOKEN_VAR, "x2"},
  {0x621d, OPCODE_2BYTE, TOKEN_VAR, "x3"},
  {0x621e, OPCODE_2BYTE, TOKEN_VAR, "y1"},
  {0x621f, OPCODE_2BYTE, TOKEN_VAR, "y2"},
  {0x6220, OPCODE_2BYTE, TOKEN_VAR, "y3"},
  {0x6221, OPCODE_2BYTE, TOKEN_VAR, "n"},
  {0x6222, OPCODE_2BYTE, TOKEN_VAR, "p"},
  {0x6223, OPCODE_2BYTE, TOKEN_VAR, "z"},
  {0x6224, OPCODE_2BYTE, TOKEN_VAR, "t"},
  {0x6225, OPCODE_2BYTE, TOKEN_VAR, "X2"},
  {0x6226, OPCODE_2BYTE, TOKEN_VAR, "F"}, // wot
  {0x6227, OPCODE_2BYTE, TOKEN_VAR, "df"},
  {0x6228, OPCODE_2BYTE, TOKEN_VAR, "p^"},
  {0x6229, OPCODE_2BYTE, TOKEN_VAR, "p1^"},
  {0x622a, OPCODE_2BYTE, TOKEN_VAR, "p2^"},
  {0x622b, OPCODE_2BYTE, TOKEN_VAR, "xbar1"},
  {0x622c, OPCODE_2BYTE, TOKEN_VAR, "Sx1"},
  {0x622d, OPCODE_2BYTE, TOKEN_VAR, "n1"},
  {0x622e, OPCODE_2BYTE, TOKEN_VAR, "xbar2"},
  {0x622f, OPCODE_2BYTE, TOKEN_VAR, "Sx2"},
  {0x6230, OPCODE_2BYTE, TOKEN_VAR, "n2"},
  {0x6231, OPCODE_2BYTE, TOKEN_VAR, "Sxp"},
  {0x6232, OPCODE_2BYTE, TOKEN_VAR, "lower"},
  {0x6233, OPCODE_2BYTE, TOKEN_VAR, "upper"},
  {0x6234, OPCODE_2BYTE, TOKEN_VAR, "s"},
  {0x6235, OPCODE_2BYTE, TOKEN_VAR, "r2"},
  {0x6236, OPCODE_2BYTE, TOKEN_VAR, "R2"},
  {0x6237, OPCODE_2BYTE, TOKEN_VAR, "Factor df"},
  {0x6238, OPCODE_2BYTE, TOKEN_VAR, "Factor SS"},
  {0x6239, OPCODE_2BYTE, TOKEN_VAR, "Factor MS"},
  {0x623a, OPCODE_2BYTE, TOKEN_VAR, "Error df"},
  {0x623b, OPCODE_2BYTE, TOKEN_VAR, "Error SS"},
  {0x623c, OPCODE_2BYTE, TOKEN_VAR, "Error MS"},

  {0x6300, OPCODE_2BYTE, TOKEN_VAR, "ZXscl"},
  {0x6301, OPCODE_2BYTE, TOKEN_VAR, "ZYscl"},
  {0x6302, OPCODE_2BYTE, TOKEN_VAR, "Xscl"},
  {0x6303, OPCODE_2BYTE, TOKEN_VAR, "Yscl"},
  {0x6304, OPCODE_2BYTE, TOKEN_VAR, "u(nMin)"},
  {0x6305, OPCODE_2BYTE, TOKEN_VAR, "v(nMin)"},
  {0x6306, OPCODE_2BYTE, TOKEN_VAR, "u(n-1)"},
  {0x6307, OPCODE_2BYTE, TOKEN_VAR, "v(n-1)"},
  {0x6308, OPCODE_2BYTE, TOKEN_VAR, "Zu(nMin)"},
  {0x6309, OPCODE_2BYTE, TOKEN_VAR, "Zv(nMin)"},
  {0x630a, OPCODE_2BYTE, TOKEN_VAR, "Xmin"},
  {0x630b, OPCODE_2BYTE, TOKEN_VAR, "Xmax"},
  {0x630c, OPCODE_2BYTE, TOKEN_VAR, "Ymin"},
  {0x630d, OPCODE_2BYTE, TOKEN_VAR, "Ymax"},
  {0x630e, OPCODE_2BYTE, TOKEN_VAR, "Tmin"},
  {0x630f, OPCODE_2BYTE, TOKEN_VAR, "Tmax"},
  {0x6310, OPCODE_2BYTE, TOKEN_VAR, "thmin"},
  {0x6311, OPCODE_2BYTE, TOKEN_VAR, "thmax"},
  {0x6312, OPCODE_2BYTE, TOKEN_VAR, "ZXmin"},
  {0x6313, OPCODE_2BYTE, TOKEN_VAR, "ZXmax"},
  {0x6314, OPCODE_2BYTE, TOKEN_VAR, "ZYmin"},
  {0x6315, OPCODE_2BYTE, TOKEN_VAR, "ZYmax"},
  {0x6316, OPCODE_2BYTE, TOKEN_VAR, "Zthmin"},
  {0x6317, OPCODE_2BYTE, TOKEN_VAR, "Zthmax"},
  {0x6318, OPCODE_2BYTE, TOKEN_VAR, "ZTmin"},
  {0x6319, OPCODE_2BYTE, TOKEN_VAR, "ZTmax"},
  {0x631a, OPCODE_2BYTE, TOKEN_FUNCTION, "TblStart"},
  {0x631b, OPCODE_2BYTE, TOKEN_FUNCTION, "PlotStart"},
  {0x631c, OPCODE_2BYTE, TOKEN_FUNCTION, "ZPlotStart"},
  {0x631d, OPCODE_2BYTE, TOKEN_VAR, "nMax"},
  {0x631e, OPCODE_2BYTE, TOKEN_VAR, "ZnMax"},
  {0x631f, OPCODE_2BYTE, TOKEN_VAR, "nMin"},
  {0x6320, OPCODE_2BYTE, TOKEN_VAR, "ZnMin"},
  {0x6321, OPCODE_2BYTE, TOKEN_VAR, "dTbl"},
  {0x6322, OPCODE_2BYTE, TOKEN_VAR, "Tstep"},
  {0x6323, OPCODE_2BYTE, TOKEN_VAR, "thstep"},
  {0x6324, OPCODE_2BYTE, TOKEN_VAR, "ZTstep"},
  {0x6325, OPCODE_2BYTE, TOKEN_VAR, "Zthstep"}, 
  {0x6326, OPCODE_2BYTE, TOKEN_VAR, "dX"},
  {0x6327, OPCODE_2BYTE, TOKEN_VAR, "dY"},
  {0x6328, OPCODE_2BYTE, TOKEN_VAR, "XFact"},
  {0x6329, OPCODE_2BYTE, TOKEN_VAR, "YFact"},
  {0x632a, OPCODE_2BYTE, TOKEN_FUNCTION, "TblInput"},
  {0x632b, OPCODE_2BYTE, TOKEN_VAR, "N"}, // wot
  {0x632c, OPCODE_2BYTE, TOKEN_VAR, "I%"},
  {0x632d, OPCODE_2BYTE, TOKEN_VAR, "PV"},
  {0x632e, OPCODE_2BYTE, TOKEN_VAR, "PMT"},
  {0x632f, OPCODE_2BYTE, TOKEN_VAR, "FV"},
  {0x6330, OPCODE_2BYTE, TOKEN_VAR, "P/Y"},
  {0x6331, OPCODE_2BYTE, TOKEN_VAR, "C/Y"},
  {0x6332, OPCODE_2BYTE, TOKEN_VAR, "w(nMin)"},
  {0x6333, OPCODE_2BYTE, TOKEN_VAR, "Zw(nMin)"},
  {0x6334, OPCODE_2BYTE, TOKEN_VAR, "PlotStep"},
  {0x6335, OPCODE_2BYTE, TOKEN_VAR, "ZPlotStep"},
  {0x6336, OPCODE_2BYTE, TOKEN_VAR, "Xres"},
  {0x6337, OPCODE_2BYTE, TOKEN_VAR, "ZXres"},
  {0x6338, OPCODE_2BYTE, TOKEN_VAR, "TraceStep"},

  {0x7e00, OPCODE_2BYTE, TOKEN_VAR, "Sequential"},
  {0x7e01, OPCODE_2BYTE, TOKEN_VAR, "Simul"},
  {0x7e02, OPCODE_2BYTE, TOKEN_VAR, "PolarGC"},
  {0x7e03, OPCODE_2BYTE, TOKEN_VAR, "RectGC"},
  {0x7e04, OPCODE_2BYTE, TOKEN_FUNCTION, "CoordOn"},
  {0x7e05, OPCODE_2BYTE, TOKEN_FUNCTION, "CoordOff"},
  {0x7e06, OPCODE_2BYTE, TOKEN_VAR, "Connected"},
  {0x7e07, OPCODE_2BYTE, TOKEN_VAR, "Dot"},
  {0x7e08, OPCODE_2BYTE, TOKEN_FUNCTION, "AxesOn"},
  {0x7e09, OPCODE_2BYTE, TOKEN_FUNCTION, "AxesOff"},
  {0x7e0a, OPCODE_2BYTE, TOKEN_FUNCTION, "GridOn"},
  {0x7e0b, OPCODE_2BYTE, TOKEN_FUNCTION, "GridOff"},
  {0x7e0c, OPCODE_2BYTE, TOKEN_FUNCTION, "LabelOn"},
  {0x7e0d, OPCODE_2BYTE, TOKEN_FUNCTION, "LabelOff"},
  {0x7e0e, OPCODE_2BYTE, TOKEN_VAR, "Web"},
  {0x7e0f, OPCODE_2BYTE, TOKEN_VAR, "Time"},
  {0x7e10, OPCODE_2BYTE, TOKEN_VAR, "uvAxes"},
  {0x7e11, OPCODE_2BYTE, TOKEN_VAR, "vwAxes"},
  {0x7e12, OPCODE_2BYTE, TOKEN_VAR, "uwAxes"},

  {0xbb00, OPCODE_2BYTE, TOKEN_FUNCTION, "npv("},
  {0xbb01, OPCODE_2BYTE, TOKEN_FUNCTION, "irr("},
  {0xbb02, OPCODE_2BYTE, TOKEN_FUNCTION, "bal("},
  {0xbb03, OPCODE_2BYTE, TOKEN_FUNCTION, "sumprn("},
  {0xbb04, OPCODE_2BYTE, TOKEN_FUNCTION, "sumInt("},
  {0xbb05, OPCODE_2BYTE, TOKEN_FUNCTION, ">Nom("},
  {0xbb06, OPCODE_2BYTE, TOKEN_FUNCTION, ">Eff("},
  {0xbb07, OPCODE_2BYTE, TOKEN_FUNCTION, "dbd("},
  {0xbb08, OPCODE_2BYTE, TOKEN_FUNCTION, "lcm("},
  {0xbb09, OPCODE_2BYTE, TOKEN_FUNCTION, "gcd("},
  {0xbb0a, OPCODE_2BYTE, TOKEN_FUNCTION, "randInt("},
  {0xbb0b, OPCODE_2BYTE, TOKEN_FUNCTION, "randBin("},
  {0xbb0c, OPCODE_2BYTE, TOKEN_FUNCTION, "sub("},
  {0xbb0d, OPCODE_2BYTE, TOKEN_FUNCTION, "stdDev("},
  {0xbb0e, OPCODE_2BYTE, TOKEN_FUNCTION, "variance("},
  {0xbb0f, OPCODE_2BYTE, TOKEN_FUNCTION, "inString("},
  {0xbb10, OPCODE_2BYTE, TOKEN_FUNCTION, "normalcdf("},
  {0xbb11, OPCODE_2BYTE, TOKEN_FUNCTION, "invNorm("},
  {0xbb12, OPCODE_2BYTE, TOKEN_FUNCTION, "tcdf("},
  {0xbb13, OPCODE_2BYTE, TOKEN_FUNCTION, "X2cdf("},
  {0xbb14, OPCODE_2BYTE, TOKEN_FUNCTION, "Fcdf("},
  {0xbb15, OPCODE_2BYTE, TOKEN_FUNCTION, "binompdf("},
  {0xbb16, OPCODE_2BYTE, TOKEN_FUNCTION, "binomcdf("},
  {0xbb17, OPCODE_2BYTE, TOKEN_FUNCTION, "poissonpdf("},
  {0xbb18, OPCODE_2BYTE, TOKEN_FUNCTION, "poissoncdf("},
  {0xbb19, OPCODE_2BYTE, TOKEN_FUNCTION, "geometpdf("},
  {0xbb1a, OPCODE_2BYTE, TOKEN_FUNCTION, "geometcdf("},
  {0xbb1b, OPCODE_2BYTE, TOKEN_FUNCTION, "normalpdf("},
  {0xbb1c, OPCODE_2BYTE, TOKEN_FUNCTION, "tpdf("},
  {0xbb1d, OPCODE_2BYTE, TOKEN_FUNCTION, "X2pdf("},
  {0xbb1e, OPCODE_2BYTE, TOKEN_FUNCTION, "Fpdf("},
  {0xbb1f, OPCODE_2BYTE, TOKEN_FUNCTION, "randNorm("},
  {0xbb20, OPCODE_2BYTE, TOKEN_VAR, "tvm_Pmt"},
  {0xbb21, OPCODE_2BYTE, TOKEN_VAR, "tvm_I%"},
  {0xbb22, OPCODE_2BYTE, TOKEN_VAR, "tvm_PV"},
  {0xbb23, OPCODE_2BYTE, TOKEN_VAR, "tvm_N"},
  {0xbb24, OPCODE_2BYTE, TOKEN_VAR, "tvm_FV"},
  {0xbb25, OPCODE_2BYTE, TOKEN_FUNCTION, "conj("},
  {0xbb26, OPCODE_2BYTE, TOKEN_FUNCTION, "real("},
  {0xbb27, OPCODE_2BYTE, TOKEN_FUNCTION, "imag("},
  {0xbb28, OPCODE_2BYTE, TOKEN_FUNCTION, "angle("},
  {0xbb29, OPCODE_2BYTE, TOKEN_FUNCTION, "cumSum("},
  {0xbb2a, OPCODE_2BYTE, TOKEN_FUNCTION, "expr("},
  {0xbb2b, OPCODE_2BYTE, TOKEN_FUNCTION, "length("},
  {0xbb2c, OPCODE_2BYTE, TOKEN_FUNCTION, "dList("},
  {0xbb2d, OPCODE_2BYTE, TOKEN_FUNCTION, "ref("},
  {0xbb2e, OPCODE_2BYTE, TOKEN_FUNCTION, "rref("},
  {0xbb2f, OPCODE_2BYTE, TOKEN_FUNCTION, ">Rect"},
  {0xbb30, OPCODE_2BYTE, TOKEN_FUNCTION, ">Polar"},
  {0xbb31, OPCODE_2BYTE, TOKEN_VAR, "e"},
  {0xbb32, OPCODE_2BYTE, TOKEN_VAR, "SinReg"},
  {0xbb33, OPCODE_2BYTE, TOKEN_VAR, "Logistic"},
  {0xbb34, OPCODE_2BYTE, TOKEN_VAR, "LinRegTTest"},
  {0xbb35, OPCODE_2BYTE, TOKEN_FUNCTION, "ShadeNorm("},
  {0xbb36, OPCODE_2BYTE, TOKEN_FUNCTION, "Shade_t("},
  {0xbb37, OPCODE_2BYTE, TOKEN_VAR, "ShadeX2"},
  {0xbb38, OPCODE_2BYTE, TOKEN_FUNCTION, "ShadeF("},
  {0xbb39, OPCODE_2BYTE, TOKEN_FUNCTION, "Matr>list("},
  {0xbb3a, OPCODE_2BYTE, TOKEN_FUNCTION, "List>matr("},
  {0xbb3b, OPCODE_2BYTE, TOKEN_FUNCTION, "Z-Test("},
  {0xbb3c, OPCODE_2BYTE, TOKEN_VAR, "T-Test"},
  {0xbb3d, OPCODE_2BYTE, TOKEN_FUNCTION, "2-SampZTest("},
  {0xbb3e, OPCODE_2BYTE, TOKEN_FUNCTION, "1-PropZTest("},
  {0xbb3f, OPCODE_2BYTE, TOKEN_FUNCTION, "2-PropZTest("},
  {0xbb40, OPCODE_2BYTE, TOKEN_FUNCTION, "X2-Test("},
  {0xbb41, OPCODE_2BYTE, TOKEN_VAR, "ZInterval"},
  {0xbb42, OPCODE_2BYTE, TOKEN_FUNCTION, "2-SampZInt("},
  {0xbb43, OPCODE_2BYTE, TOKEN_FUNCTION, "1-PropZInt("},
  {0xbb44, OPCODE_2BYTE, TOKEN_FUNCTION, "2-PropZInt("},
  {0xbb45, OPCODE_2BYTE, TOKEN_FUNCTION, "GraphStyle("},
  {0xbb46, OPCODE_2BYTE, TOKEN_VAR, "2-SampTTest"},
  {0xbb47, OPCODE_2BYTE, TOKEN_VAR, "2-SampFTest"},
  {0xbb48, OPCODE_2BYTE, TOKEN_VAR, "TInterval"},
  {0xbb49, OPCODE_2BYTE, TOKEN_VAR, "2-SampTInt"},
  {0xbb4a, OPCODE_2BYTE, TOKEN_FUNCTION, "SetUpEditor"},
  {0xbb4b, OPCODE_2BYTE, TOKEN_VAR, "Pmt_End"},
  {0xbb4c, OPCODE_2BYTE, TOKEN_VAR, "Pmt_Bgn"},
  {0xbb4d, OPCODE_2BYTE, TOKEN_VAR, "Real"},
  {0xbb4e, OPCODE_2BYTE, TOKEN_VAR, "re^thi"},
  {0xbb4f, OPCODE_2BYTE, TOKEN_VAR, "a+bi"},
  {0xbb50, OPCODE_2BYTE, TOKEN_FUNCTION, "ExprOn"},
  {0xbb51, OPCODE_2BYTE, TOKEN_FUNCTION, "ExprOff"},
  {0xbb52, OPCODE_2BYTE, TOKEN_FUNCTION, "ClrAllLists"},
  {0xbb53, OPCODE_2BYTE, TOKEN_FUNCTION, "GetCalc("},
  {0xbb54, OPCODE_2BYTE, TOKEN_FUNCTION, "DelVar"},
  {0xbb55, OPCODE_2BYTE, TOKEN_FUNCTION, "Equ>String("},
  {0xbb56, OPCODE_2BYTE, TOKEN_FUNCTION, "String>Equ("},
  {0xbb57, OPCODE_2BYTE, TOKEN_FUNCTION, "Clear Entries"},
  {0xbb58, OPCODE_2BYTE, TOKEN_FUNCTION, "Select("},
  {0xbb59, OPCODE_2BYTE, TOKEN_FUNCTION, "ANOVA("},
  {0xbb5a, OPCODE_2BYTE, TOKEN_VAR, "ModBoxplot"},
  {0xbb5b, OPCODE_2BYTE, TOKEN_VAR, "NormProbPlot"},
  {0xbb64, OPCODE_2BYTE, TOKEN_VAR, "G-T"},
  {0xbb65, OPCODE_2BYTE, TOKEN_VAR, "ZoomFit"},
  {0xbb66, OPCODE_2BYTE, TOKEN_FUNCTION, "DiagnosticOn"},
  {0xbb67, OPCODE_2BYTE, TOKEN_FUNCTION, "DiagnosticOff"},
  {0xbb68, OPCODE_2BYTE, TOKEN_FUNCTION, "Archive"},
  {0xbb69, OPCODE_2BYTE, TOKEN_FUNCTION, "UnArchive"},
  {0xbb6a, OPCODE_2BYTE, TOKEN_FUNCTION, "Asm("},
  {0xbb6b, OPCODE_2BYTE, TOKEN_FUNCTION, "AsmComp("},
  {0xbb6c, OPCODE_2BYTE, TOKEN_FUNCTION, "AsmPrgm"},
  {0xbb6e, OPCODE_2BYTE, TOKEN_OTHER, "Á"},
  {0xbb6f, OPCODE_2BYTE, TOKEN_OTHER, "À"},
  {0xbb70, OPCODE_2BYTE, TOKEN_OTHER, "Â"},
  {0xbb71, OPCODE_2BYTE, TOKEN_OTHER, "Ä"},
  {0xbb72, OPCODE_2BYTE, TOKEN_OTHER, "á"},
  {0xbb73, OPCODE_2BYTE, TOKEN_OTHER, "à"},
  {0xbb74, OPCODE_2BYTE, TOKEN_OTHER, "â"},
  {0xbb75, OPCODE_2BYTE, TOKEN_OTHER, "ä"},
  {0xbb76, OPCODE_2BYTE, TOKEN_OTHER, "É"},
  {0xbb77, OPCODE_2BYTE, TOKEN_OTHER, "È"},
  {0xbb78, OPCODE_2BYTE, TOKEN_OTHER, "Ê"},
  {0xbb79, OPCODE_2BYTE, TOKEN_OTHER, "Ë"},
  {0xbb7a, OPCODE_2BYTE, TOKEN_OTHER, "é"},
  {0xbb7b, OPCODE_2BYTE, TOKEN_OTHER, "è"},
  {0xbb7c, OPCODE_2BYTE, TOKEN_OTHER, "ê"},
  {0xbb7d, OPCODE_2BYTE, TOKEN_OTHER, "ë"},
  {0xbb7f, OPCODE_2BYTE, TOKEN_OTHER, "Ì"},
  {0xbb80, OPCODE_2BYTE, TOKEN_OTHER, "Î"},
  {0xbb81, OPCODE_2BYTE, TOKEN_OTHER, "Ï"},
  {0xbb82, OPCODE_2BYTE, TOKEN_OTHER, "í"},
  {0xbb83, OPCODE_2BYTE, TOKEN_OTHER, "ì"},
  {0xbb84, OPCODE_2BYTE, TOKEN_OTHER, "î"},
  {0xbb85, OPCODE_2BYTE, TOKEN_OTHER, "ï"},
  {0xbb86, OPCODE_2BYTE, TOKEN_OTHER, "Ó"},
  {0xbb87, OPCODE_2BYTE, TOKEN_OTHER, "Ò"},
  {0xbb88, OPCODE_2BYTE, TOKEN_OTHER, "Ô"},
  {0xbb89, OPCODE_2BYTE, TOKEN_OTHER, "Ö"},
  {0xbb8a, OPCODE_2BYTE, TOKEN_OTHER, "ó"},
  {0xbb8b, OPCODE_2BYTE, TOKEN_OTHER, "ò"},
  {0xbb8c, OPCODE_2BYTE, TOKEN_OTHER, "ô"},
  {0xbb8d, OPCODE_2BYTE, TOKEN_OTHER, "ö"},
  {0xbb8e, OPCODE_2BYTE, TOKEN_OTHER, "Ú"},
  {0xbb8f, OPCODE_2BYTE, TOKEN_OTHER, "Ù"},
  {0xbb90, OPCODE_2BYTE, TOKEN_OTHER, "Û"},
  {0xbb91, OPCODE_2BYTE, TOKEN_OTHER, "Ü"},
  {0xbb92, OPCODE_2BYTE, TOKEN_OTHER, "ú"},
  {0xbb93, OPCODE_2BYTE, TOKEN_OTHER, "ù"},
  {0xbb94, OPCODE_2BYTE, TOKEN_OTHER, "û"},
  {0xbb95, OPCODE_2BYTE, TOKEN_OTHER, "ü"},
  {0xbb96, OPCODE_2BYTE, TOKEN_OTHER, "Ç"},
  {0xbb97, OPCODE_2BYTE, TOKEN_OTHER, "ç"},
  {0xbb98, OPCODE_2BYTE, TOKEN_OTHER, "Ñ"},
  {0xbb99, OPCODE_2BYTE, TOKEN_OTHER, "ñ"},
  {0xbb9a, OPCODE_2BYTE, TOKEN_OTHER, "´"},
  {0xbb9b, OPCODE_2BYTE, TOKEN_OTHER, "`"},
  {0xbb9c, OPCODE_2BYTE, TOKEN_OTHER, "¨"},
  {0xbb9d, OPCODE_2BYTE, TOKEN_OTHER, "¿"},
  {0xbb9e, OPCODE_2BYTE, TOKEN_OTHER, "¡"},
  {0xbb9f, OPCODE_2BYTE, TOKEN_OTHER, "α"},
  {0xbba0, OPCODE_2BYTE, TOKEN_OTHER, "β"},
  {0xbba1, OPCODE_2BYTE, TOKEN_OTHER, "γ"},
  {0xbba2, OPCODE_2BYTE, TOKEN_OTHER, "Δ"},
  {0xbba3, OPCODE_2BYTE, TOKEN_OTHER, "δ"},
  {0xbba4, OPCODE_2BYTE, TOKEN_OTHER, "ε"},
  {0xbba5, OPCODE_2BYTE, TOKEN_OTHER, "λ"},
  {0xbba6, OPCODE_2BYTE, TOKEN_OTHER, "μ"},
  {0xbba7, OPCODE_2BYTE, TOKEN_OTHER, "π"},
  {0xbba8, OPCODE_2BYTE, TOKEN_OTHER, "ρ"},
  {0xbba9, OPCODE_2BYTE, TOKEN_OTHER, "Σ"},
  {0xbbab, OPCODE_2BYTE, TOKEN_OTHER, "φ"},
  {0xbbac, OPCODE_2BYTE, TOKEN_OTHER, "Ω"},
  {0xbbad, OPCODE_2BYTE, TOKEN_OTHER, "p^"},
  {0xbbae, OPCODE_2BYTE, TOKEN_OTHER, "χ"},

  // lowercase letters (need some context awareness)
  {0xbbcb, OPCODE_2BYTE, TOKEN_OTHER, "σ"},
  {0xbbcc, OPCODE_2BYTE, TOKEN_OTHER, "τ"},
  {0xbbcd, OPCODE_2BYTE, TOKEN_OTHER, "Í"},
  {0xbbce, OPCODE_2BYTE, TOKEN_FUNCTION, "GarbageCollect"},
  {0xbbcf, OPCODE_2BYTE, TOKEN_OTHER, "~"},
  {0xbbd1, OPCODE_2BYTE, TOKEN_OTHER, "@"},
  {0xbbd2, OPCODE_2BYTE, TOKEN_OTHER, "#"},
  {0xbbd3, OPCODE_2BYTE, TOKEN_OTHER, "$"},
  {0xbbd4, OPCODE_2BYTE, TOKEN_OTHER, "&"},
  {0xbbd5, OPCODE_2BYTE, TOKEN_OTHER, "`"},
  {0xbbd6, OPCODE_2BYTE, TOKEN_OTHER, ";"},
  {0xbbd7, OPCODE_2BYTE, TOKEN_OTHER, "\\"},
  {0xbbd8, OPCODE_2BYTE, TOKEN_OTHER, "|"},
  {0xbbd9, OPCODE_2BYTE, TOKEN_OTHER, "_"},
  {0xbbda, OPCODE_2BYTE, TOKEN_OTHER, "%"},
  {0xbbdb, OPCODE_2BYTE, TOKEN_OTHER, "…"},
  {0xbbdc, OPCODE_2BYTE, TOKEN_OTHER, "∠"},
  {0xbbdd, OPCODE_2BYTE, TOKEN_OTHER, "ß"},
  {0xbbde, OPCODE_2BYTE, TOKEN_OTHER, "x"},
  {0xbbdf, OPCODE_2BYTE, TOKEN_OTHER, "T"},
  {0xbbeb, OPCODE_2BYTE, TOKEN_OTHER, "←"},
  {0xbbec, OPCODE_2BYTE, TOKEN_OTHER, "→"},
  {0xbbed, OPCODE_2BYTE, TOKEN_OTHER, "↑"},
  {0xbbee, OPCODE_2BYTE, TOKEN_OTHER, "↓"},
  {0xbbf0, OPCODE_2BYTE, TOKEN_OTHER, "x"},
  {0xbbf1, OPCODE_2BYTE, TOKEN_OTHER, "∫"},
  {0xbbf4, OPCODE_2BYTE, TOKEN_OTHER, "√"},

  // More context-aware stuff
  /* {0xbbe0, OPCODE_2BYTE, "0"}, */
  /* {0xbbe1, OPCODE_2BYTE, "1"}, */
  /* {0xbbe2, OPCODE_2BYTE, "2"}, */
  /* {0xbbe3, OPCODE_2BYTE, "3"}, */
  /* {0xbbe4, OPCODE_2BYTE, "4"}, */
  /* {0xbbe5, OPCODE_2BYTE, "5"}, */
  /* {0xbbe6, OPCODE_2BYTE, "6"}, */
  /* {0xbbe7, OPCODE_2BYTE, "7"}, */
  /* {0xbbe8, OPCODE_2BYTE, "8"}, */
  /* {0xbbe9, OPCODE_2BYTE, "9"}, */
  {0xbbb0, OPCODE_2BYTE, TOKEN_OTHER, "a"},
  {0xbbb1, OPCODE_2BYTE, TOKEN_OTHER, "b"},
  {0xbbb2, OPCODE_2BYTE, TOKEN_OTHER, "c"},
  {0xbbb3, OPCODE_2BYTE, TOKEN_OTHER, "d"},
  {0xbbb4, OPCODE_2BYTE, TOKEN_OTHER, "e"},
  {0xbbb5, OPCODE_2BYTE, TOKEN_OTHER, "f"},
  {0xbbb6, OPCODE_2BYTE, TOKEN_OTHER, "g"},
  {0xbbb7, OPCODE_2BYTE, TOKEN_OTHER, "h"},
  {0xbbb8, OPCODE_2BYTE, TOKEN_OTHER, "i"},
  {0xbbb9, OPCODE_2BYTE, TOKEN_OTHER, "j"},
  {0xbbba, OPCODE_2BYTE, TOKEN_OTHER, "k"},
  {0xbbbc, OPCODE_2BYTE, TOKEN_OTHER, "l"},
  {0xbbbd, OPCODE_2BYTE, TOKEN_OTHER, "m"},
  {0xbbbe, OPCODE_2BYTE, TOKEN_OTHER, "n"},
  {0xbbbf, OPCODE_2BYTE, TOKEN_OTHER, "o"},
  {0xbbc0, OPCODE_2BYTE, TOKEN_OTHER, "p"},
  {0xbbc1, OPCODE_2BYTE, TOKEN_OTHER, "q"},
  {0xbbc2, OPCODE_2BYTE, TOKEN_OTHER, "r"},
  {0xbbc3, OPCODE_2BYTE, TOKEN_OTHER, "s"},
  {0xbbc4, OPCODE_2BYTE, TOKEN_OTHER, "t"},
  {0xbbc5, OPCODE_2BYTE, TOKEN_OTHER, "u"},
  {0xbbc6, OPCODE_2BYTE, TOKEN_OTHER, "v"},
  {0xbbc7, OPCODE_2BYTE, TOKEN_OTHER, "w"},
  {0xbbc8, OPCODE_2BYTE, TOKEN_OTHER, "x"},
  {0xbbc9, OPCODE_2BYTE, TOKEN_OTHER, "y"},
  {0xbbca, OPCODE_2BYTE, TOKEN_OTHER, "z"},

  {0x3f, OPCODE_1BYTE, TOKEN_OTHER, "\n"},
  {0x3f, OPCODE_1BYTE, TOKEN_OTHER, "\r\n"},
  {0x70, OPCODE_1BYTE, TOKEN_OPERATOR, "+"},
  {0x71, OPCODE_1BYTE, TOKEN_OPERATOR, "-"},
  {0x2a, OPCODE_1BYTE, TOKEN_OTHER, "\""},
  {0x2b, OPCODE_1BYTE, TOKEN_OPERATOR, ","},
  {0xae, OPCODE_1BYTE, TOKEN_OTHER, "'"},
  {0xaf, OPCODE_1BYTE, TOKEN_OTHER, "?"},
  {0x06, OPCODE_1BYTE, TOKEN_OPERATOR, "["},
  {0x07, OPCODE_1BYTE, TOKEN_OPERATOR, "]"},
  {0x08, OPCODE_1BYTE, TOKEN_OPERATOR, "{"},
  {0x09, OPCODE_1BYTE, TOKEN_OPERATOR, "}"},
  {0x10, OPCODE_1BYTE, TOKEN_OPERATOR, "("},
  {0x11, OPCODE_1BYTE, TOKEN_OPERATOR, ")"},
  {0x6d, OPCODE_1BYTE, TOKEN_OPERATOR, "<="},
  {0x6e, OPCODE_1BYTE, TOKEN_OPERATOR, ">="},
  {0x6a, OPCODE_1BYTE, TOKEN_OPERATOR, "="},
  {0x6b, OPCODE_1BYTE, TOKEN_OPERATOR, "<"},
  {0x6c, OPCODE_1BYTE, TOKEN_OPERATOR, ">"},
  {0x6f, OPCODE_1BYTE, TOKEN_OPERATOR, "!="},
  {0x2d, OPCODE_1BYTE, TOKEN_OPERATOR, "!"},
  {0x82, OPCODE_1BYTE, TOKEN_OPERATOR, "*"},
  {0x83, OPCODE_1BYTE, TOKEN_OPERATOR, "/"},
  {0x3e, OPCODE_1BYTE, TOKEN_OTHER, ":"},
  {0xf0, OPCODE_1BYTE, TOKEN_OPERATOR, "^"},
  {0x3a, OPCODE_1BYTE, TOKEN_OPERATOR, "."},
  {0xb0, OPCODE_1BYTE, TOKEN_OPERATOR, "-"},

  // alphabetical opcodes
  {'A',  OPCODE_1BYTE, TOKEN_VAR, "A"},
  {'B',  OPCODE_1BYTE, TOKEN_VAR, "B"},
  {'C',  OPCODE_1BYTE, TOKEN_VAR, "C"},
  {'D',  OPCODE_1BYTE, TOKEN_VAR, "D"},
  {'E',  OPCODE_1BYTE, TOKEN_VAR, "E"},
  {'F',  OPCODE_1BYTE, TOKEN_VAR, "F"},
  {'G',  OPCODE_1BYTE, TOKEN_VAR, "G"},
  {'H',  OPCODE_1BYTE, TOKEN_VAR, "H"},
  {'I',  OPCODE_1BYTE, TOKEN_VAR, "I"},
  {'J',  OPCODE_1BYTE, TOKEN_VAR, "J"},
  {'K',  OPCODE_1BYTE, TOKEN_VAR, "K"},
  {'L',  OPCODE_1BYTE, TOKEN_VAR, "L"},
  {'M',  OPCODE_1BYTE, TOKEN_VAR, "M"},
  {'N',  OPCODE_1BYTE, TOKEN_VAR, "N"},
  {'O',  OPCODE_1BYTE, TOKEN_VAR, "O"},
  {'P',  OPCODE_1BYTE, TOKEN_VAR, "P"},
  {'Q',  OPCODE_1BYTE, TOKEN_VAR, "Q"},
  {'R',  OPCODE_1BYTE, TOKEN_VAR, "R"},
  {'S',  OPCODE_1BYTE, TOKEN_VAR, "S"},
  {'T',  OPCODE_1BYTE, TOKEN_VAR, "T"},
  {'U',  OPCODE_1BYTE, TOKEN_VAR, "U"},
  {'V',  OPCODE_1BYTE, TOKEN_VAR, "V"},
  {'W',  OPCODE_1BYTE, TOKEN_VAR, "W"},
  {'X',  OPCODE_1BYTE, TOKEN_VAR, "X"},
  {'Y',  OPCODE_1BYTE, TOKEN_VAR, "Y"},
  {'Z',  OPCODE_1BYTE, TOKEN_VAR, "Z"},
  {'0',  OPCODE_1BYTE, TOKEN_VAR, "0"},
  {'1',  OPCODE_1BYTE, TOKEN_VAR, "1"},
  {'2',  OPCODE_1BYTE, TOKEN_VAR, "2"},
  {'3',  OPCODE_1BYTE, TOKEN_VAR, "3"},
  {'4',  OPCODE_1BYTE, TOKEN_VAR, "4"},
  {'5',  OPCODE_1BYTE, TOKEN_VAR, "5"},
  {'6',  OPCODE_1BYTE, TOKEN_VAR, "6"},
  {'7',  OPCODE_1BYTE, TOKEN_VAR, "7"},
  {'8',  OPCODE_1BYTE, TOKEN_VAR, "8"},
  {'9',  OPCODE_1BYTE, TOKEN_VAR, "9"},

  {0,    OPCODE_1BYTE, TOKEN_NONE, NULL}
};

#endif
